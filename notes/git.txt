--------------------------------------------------
CONFIGURATION
--------------------------------------------------
git config --list
git config --global user.name "jackhab"
git config --global user.email "jackhab@gmail.com"
git config --global core.editor vim
git config --global core.pager "cat"
git config --global --add difftool.prompt false
git config --global diff.tool meld
git config --global mergetool.meld.cmd 'meld $LOCAL $MERGED $REMOTE'
git config --global difftool.meld.cmd 'meld $LOCAL $REMOTE'
git config branch.master.rebase true                #use --rebase when pulling to prevent merge commits created after each pull
git config --global branch.autosetuprebase always   #use --rebase for all tracking branches
git config --global credential.helper cache         #remember repo password for 15 minutes


--------------------------------------------------
REPO
--------------------------------------------------
create local working repo
    git init

create remote repo: always should be bare
    git --bare init

convert non-bare working repo into bare one
    git clone --bare -l non_bare_repo new_bare_repo

clone a repo
    git clone https://github.com/libgit2/libgit2

show remote repos
    git remote -v

add a new remote repo
    git remote add local_proj /opt/git/project.git
    git remote add pb https://github.com/paulboone/ticgit
    git fetch pb


--------------------------------------------------
DIFF
--------------------------------------------------
show unstaged changes
    git diff

show staged changes
    git diff --staged

show changes in line, whole functions, no whitespace changes
    git diff --color-words -W -w

show changes of commit with its parent
git diff COMMIT^!


--------------------------------------------------
COMMIT
--------------------------------------------------
commit files
    git add *.c
    git add myfile
    git commit -m 'initial project version'
    git status -s

add only a part of a file to commit
	git add --patch main.c
	
commit all files, skip staging
    git commit -a -m 'added new benchmarks'

update previous commit with new changes (inlcuding comments)
    git commit --amend


--------------------------------------------------
REVERT
--------------------------------------------------
revert staged changes in working dir
    git reset --

revert unstaged changes in working dir
    git checkout -- .

discard unstaged changes in file
    git checkout myfile

get two-commits old myfile into stage, keeps working dir untouched
    git reset HEAD~2 myfile

get two commits old myfile into working dir, keeps stage and HEAD untouched
    git checkout HEAD~2 myfile


--------------------------------------------------
REMOVE
--------------------------------------------------
remove staged file, keep it working dir
    git rm --cached myfile


--------------------------------------------------
BRANCH
--------------------------------------------------
list all branches verbosely
    git branch -a -v

list obsolete merged branches
    git branch --merged

list remote branches
 git branch -r

create a new branch, without switching to it
    git branch BRANCH

switch to branch
    git checkout BRANCH

create and switch to branch
    git checkout -b BRANCH

set local master to track origin/master
	git branch master -u origin/master
	
push local branch to origin
    git push -u origin BRANCH[:branches/user/BRANCH]

checkout and track a branch from origin
    git checkout -t origin/BRANCH

merge branch as one commit
    git merge BRANCH --squash

merge changes from remote repo
    git pull --rebase

delete branch
    git branch -d BRANCH

delete remote branch
    git push origin --delete BRANCH

make bar to point to newbar (e.g. before removing newbar)
	git checkout bar
	git reset --hard newbar 
	
--------------------------------------------------
LOG
--------------------------------------------------
log with brach pointers
    git log --oneline --decorate

log changes in lines 1-5
    git log -L 1,5:main.cpp

log changes containing 'return'
    git log -L /return/:main.cpp

log with file names
    git log --name-status 
    
--------------------------------------------------
STASH
--------------------------------------------------
save to stash
    git stash

show stashes
    git stash list

pop last stash
    git stash pop

restore files without re-staging them
    git stash apply

restore files with staging state
    git stash apply --index
