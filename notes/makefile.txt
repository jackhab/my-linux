DEFINE A MULTI-LINE, RECURSIVELY-EXPANDED VARIABLE
define VAR
endef

CONDITIONS
ifdef VAR
ifndef VAR
ifeq (a,b)
ifeq "a" "b"
ifeq ’a’ ’b’
ifneq (a,b)
ifneq "a" "b"
ifneq ’a’ ’b’
else
endif

INCLUDE ANOTHER MAKEFILE
include FILE
-include FILE
sinclude FILE

DEFINE A VARIABLE, OVERRIDING ANY PREVIOUS DEFINITION
override VAR = VALUE
override VAR := VALUE
override VAR += VALUE
override VAR ?= VALUE
override define VAR
endef

EXPORT ALL VARIABLES TO CHILD PROCESSES
export
export variable = value
export variable := value
export variable += value
export variable ?= value

NOT TO EXPORT A PARTICULAR VARIABLE TO CHILD PROCESSES
unexport variable

SPECIFY A SEARCH PATH FOR FILES MATCHING A ‘%’ PATTERN.
vpath pattern path

REMOVE ALL SEARCH PATHS PREVIOUSLY SPECIFIED FOR PATTERN.
vpath pattern

vpath Remove all search paths previously specified in any vpath directive.
Here is a summary of the built-in functions (see Chapter 8 [Functions], page 77):
$(subst from,to,text)
Replace from with to in text.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(patsubst pattern,replacement,text)
Replace words matching pattern with replacement in text.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(strip string)
Remove excess whitespace characters from string.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(findstring find,text)
Locate find in text.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(filter pattern...,text)
Select words in text that match one of the pattern words.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(filter-out pattern...,text)
Select words in text that do not match any of the pattern words.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(sort list)
Sort the words in list lexicographically, removing duplicates.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(word n,text)
Extract the nth word (one-origin) of text.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(words text)
Count the number of words in text.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
Appendix A: Quick Reference 145
$(wordlist s,e,text)
Returns the list of words in text from s to e.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(firstword names...)
Extract the first word of names.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(lastword names...)
Extract the last word of names.
See Section 8.2 [Functions for String Substitution and Analysis], page 78.
$(dir names...)
Extract the directory part of each file name.
See Section 8.3 [Functions for File Names], page 81.
$(notdir names...)
Extract the non-directory part of each file name.
See Section 8.3 [Functions for File Names], page 81.
$(suffix names...)
Extract the suffix (the last ‘.’ and following characters) of each file name.
See Section 8.3 [Functions for File Names], page 81.
$(basename names...)
Extract the base name (name without suffix) of each file name.
See Section 8.3 [Functions for File Names], page 81.
$(addsuffix suffix,names...)
Append suffix to each word in names.
See Section 8.3 [Functions for File Names], page 81.
$(addprefix prefix,names...)
Prepend prefix to each word in names.
See Section 8.3 [Functions for File Names], page 81.
$(join list1,list2)
Join two parallel lists of words.
See Section 8.3 [Functions for File Names], page 81.
$(wildcard pattern...)
Find file names matching a shell file name pattern (not a ‘%’ pattern).
See Section 4.3.3 [The Function wildcard], page 26.
$(realpath names...)
For each file name in names, expand to an absolute name that does not contain
any ., .., nor symlinks.
See Section 8.3 [Functions for File Names], page 81.
$(abspath names...)
For each file name in names, expand to an absolute name that does not contain
any . or .. components, but preserves symlinks.
See Section 8.3 [Functions for File Names], page 81.
$(error text...)
When this function is evaluated, make generates a fatal error with the message
text.
See Section 8.12 [Functions That Control Make], page 90.
$(warning text...)
When this function is evaluated, make generates a warning with the message
text.
See Section 8.12 [Functions That Control Make], page 90.
$(shell command)
Execute a shell command and return its output.
See Section 8.11 [The shell Function], page 89.
$(origin variable)
Return a string describing how the make variable variable was defined.
See Section 8.9 [The origin Function], page 87.
$(flavor variable)
Return a string describing the flavor of the make variable variable.
See Section 8.10 [The flavor Function], page 89.
$(foreach var,words,text)
Evaluate text with var bound to each word in words, and concatenate the
results.
See Section 8.5 [The foreach Function], page 84.
$(call var,param,...)
Evaluate the variable var replacing any references to $(1), $(2) with the first,
second, etc. param values.
See Section 8.6 [The call Function], page 85.
$(eval text)
Evaluate text then read the results as makefile commands. Expands to the
empty string.
See Section 8.8 [The eval Function], page 86.
$(value var)
Evaluates to the contents of the variable var, with no expansion performed on
it.
See Section 8.7 [The value Function], page 86.
Here is a summary of the automatic variables. See Section 10.5.3 [Automatic Variables],
page 110, for full information.
$@ The file name of the target.
$% The target member name, when the target is an archive member.
$< The name of the first prerequisite.
$? The names of all the prerequisites that are newer than the target, with spaces
between them. For prerequisites which are archive members, only the member
named is used (see Chapter 11 [Archives], page 119).
Appendix A: Quick Reference 147
$^
$+ The names of all the prerequisites, with spaces between them. For prerequisites
which are archive members, only the member named is used (see Chapter 11
[Archives], page 119). The value of $^ omits duplicate prerequisites, while $+
retains them and preserves their order.
$* The stem with which an implicit rule matches (see Section 10.5.4 [How Patterns
Match], page 112).
$(@D)
$(@F) The directory part and the file-within-directory part of $@.
$(*D)
$(*F) The directory part and the file-within-directory part of $*.
$(%D)
$(%F) The directory part and the file-within-directory part of $%.
$(<D)
$(<F) The directory part and the file-within-directory part of $<.
$(^D)
$(^F) The directory part and the file-within-directory part of $^.
$(+D)
$(+F) The directory part and the file-within-directory part of $+.
$(?D)
$(?F) The directory part and the file-within-directory part of $?.
These variables are used specially by GNU make:
MAKEFILES
Makefiles to be read on every invocation of make.
See Section 3.4 [The Variable MAKEFILES], page 13.
VPATH
Directory search path for files not found in the current directory.
See Section 4.4.1 [VPATH Search Path for All Prerequisites], page 27.
SHELL
The name of the system default command interpreter, usually ‘/bin/sh’. You
can set SHELL in the makefile to change the shell used to run commands. See
Section 5.3 [Command Execution], page 46. The SHELL variable is handled specially
when importing from and exporting to the environment. See Section 5.3.1
[Choosing the Shell], page 46.
MAKESHELL
On MS-DOS only, the name of the command interpreter that is to be used by
make. This value takes precedence over the value of SHELL. See Section 5.3
[MAKESHELL variable], page 46.
MAKE
The name with which make was invoked. Using this variable in commands has
special meaning. See Section 5.7.1 [How the MAKE Variable Works], page 50.
148 GNU make
MAKELEVEL
The number of levels of recursion (sub-makes).
See Section 5.7.2 [Variables/Recursion], page 51.
MAKEFLAGS
The flags given to make. You can set this in the environment or a makefile to
set flags.
See Section 5.7.3 [Communicating Options to a Sub-make], page 53.
It is never appropriate to use MAKEFLAGS directly on a command line: its contents
may not be quoted correctly for use in the shell. Always allow recursive
make’s to obtain these values through the environment from its parent.
MAKECMDGOALS
The targets given to make on the command line. Setting this variable has no
effect on the operation of make.
See Section 9.2 [Arguments to Specify the Goals], page 91.
CURDIR
Set to the pathname of the current working directory (after all -C options are
processed, if any). Setting this variable has no effect on the operation of make.
See Section 5.7 [Recursive Use of make], page 50.
SUFFIXES
The default list of suffixes before make reads any makefiles.
.LIBPATTERNS
Defines the naming of the libraries make searches for, and their order.
See Section 4.4.6 [Directory Search for Link Libraries], page 30.
















































--------------------------------------------------
BASIC FORMAT
--------------------------------------------------
target1 target2 target3 : prerequisite1 prerequisite2
    command1
    command2
    command3

--------------------------------------------------
VARIABLE ASSIGNMENT
--------------------------------------------------
VAR = val       recursively expanded variable
VAR := val      simply expanded variables
VAR ?= val      assign to variable if not defined
$(var:old=new)  like patsubst
a := $($(x))    variable name generated from value of x
+=

--------------------------------------------------
AUTO VARIABLES
--------------------------------------------------
$@          target
$%          archive member (when target is an archive)
$<          first prerequisite
$+          all prerequisites with duplicates
$^          all prerequisites (no duplicates)
$?          all prerequisites, newer than the target
$|          order-only prerequisites
$*          target without extention

$(@D) $(@F)       target dirname and basename
                  same for all variables above

--------------------------------------------------
OLD SUFFIX RULE IN OLD NON-GNU MAKE
--------------------------------------------------
.c.o:
    $(COMPILE.c) $(OUTPUT_OPTION) $<
means
%.o: %.c
    $(COMPILE.c) $(OUTPUT_OPTION) $<
    
.p:
    $(LINK.p) $^ $(LOADLIBES) $(LDLIBS) -o $@
means
%: %.p
    $(LINK.p) $^ $(LOADLIBES) $(LDLIBS) -o $@



--------------------------------------------------
DEBUG SWITCH
--------------------------------------------------
--debug=[ad]
-d = --debug=a
a all
b basic
i show implicit rules, 
j invocation of commands,
m debugging while remaking makefiles
v verbose





















LINK.o = $(CC) $(LDFLAGS) $(TARGET_ARCH)
LINK.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
LINK.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c

%.o: %.c
#  commands to execute (from `Makefile', line 62):
	$(CC) -c $(CPPFLAGS) $(CFLAGS)
	

%.o: %.cpp
#  commands to execute (from `Makefile', line 65):
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS)

%: %.o
#  commands to execute (built-in):
	$(CC) $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) -o $@




%.o: %.c
	$(CC) -c $(CPPFLAGS) $(CFLAGS)

%.o: %.cpp
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS)





A file that is mentioned only as a prerequisite is considered a
target whose rule specifies nothing, so implicit rule search happens for it.

.PHONY: clean




all         Perform all tasks to build the application
install     Create an installation of the application from the compiled binaries
clean       Delete the binary files generated from sources
distclean   Delete all the generated files that were not in the original source distribution
TAGS        Create a tags table for use by editors
info        Create GNU info files from their Texinfo sources
check       Run any tests associated with this application

define two-lines
echo foo
echo $(bar)
endef

$(PATH)       system environment vars can be used as is




















VPATH search path for ANY file


    
    
    
.INTERMEDIATE
Prerequisites of this special target are treated as intermediate files. If make creates
the file while updating another target, the file will be deleted automatically when
make exits. If the file already exists when make considers updating the file, the file
will not be deleted.
This can be very useful when building custom rule chains. For instance, most
Java tools accept Windows-like file lists. Creating rules to build the file lists and
marking their output files as intermediate allows make to clean up many temporary
files.
.SECONDARY
Prerequisites of this special target are treated as intermediate files but are never
automatically deleted. The most common use of .SECONDARY is to mark object
files stored in libraries. Normally these object files will be deleted as soon as they
are added to an archive. Sometimes it is more convenient during development to
keep these object files, but still use the make support for updating archives.
.PRECIOUS
When make is interrupted during execution, it may delete the target file it is
updating if the file was modified since make started. This is so make doesn’t leave
This is the Title of the Book, eMatter Edition
Automatic Dependency Generation | 31
a partially constructed (possibly corrupt) file laying around in the build tree.
There are times when you don’t want this behavior, particularly if the file is large
and computationally expensive to create. If you mark the file as precious, make
will never delete the file if interrupted.
Use of .PRECIOUS is relatively rare, but when it is needed it is often a life saver.
Note that make will not perform an automatic delete if the commands of a rule
generate an error. It does so only when interrupted by a signal.
.DELETE_ON_ERROR
This is sort of the opposite of .PRECIOUS. Marking a target as .DELETE_ON_ERROR
says that make should delete the target if any of the commands associated with
the rule generates an error. make normally only deletes the target if it is interrupted
by a signal.



ifeq ($(CC),gcc)
$(CC) -o foo $(objects) $(libs_for_gcc)
else
$(CC) -o foo $(objects) $(normal_libs)
endif


search for flag in make flags
ifneq (,$(findstring t,$(MAKEFLAGS)))
    +touch archive.a
    +ranlib -t archive.a
else
    ranlib archive.a
endif









AR Archive-maintaining program; default ‘ar’.
AS Program for compiling assembly files; default ‘as’.
CC Program for compiling C programs; default ‘cc’.
CO Program for checking out files from RCS; default ‘co’.
CXX Program for compiling C++ programs; default ‘g++’.
CO Program for extracting a file from RCS; default ‘co’.
CPP Program for running the C preprocessor, with results to standard output; default ‘$(CC) -E’.
FC Program for compiling or preprocessing Fortran and Ratfor programs; default ‘f77’.
GET Program for extracting a file from SCCS; default ‘get’.
LEX Program to use to turn Lex grammars into source code; default ‘lex’.
YACC Program to use to turn Yacc grammars into source code; default ‘yacc’.
LINT Program to use to run lint on source code; default ‘lint’.
M2C Program to use to compile Modula-2 source code; default ‘m2c’.
PC Program for compiling Pascal programs; default ‘pc’.
MAKEINFO Program to convert a Texinfo source file into an Info file; default ‘makeinfo’.
TEX Program to make TEX dvi files from TEX source; default ‘tex’.
TEXI2DVI Program to make TEX dvi files from Texinfo source; default ‘texi2dvi’.
Chapter 10: Using Implicit Rules 107
WEAVE Program to translate Web into TEX; default ‘weave’.
CWEAVE Program to translate C Web into TEX; default ‘cweave’.
TANGLE Program to translate Web into Pascal; default ‘tangle’.
CTANGLE Program to translate C Web into C; default ‘ctangle’.
RM Command to remove a file; default ‘rm -f’.
$(AR) $(BISON) $(CC) $(FLEX) $(INSTALL) $(LD) $(LDCONFIG) $(LEX)
$(MAKE) $(MAKEINFO) $(RANLIB) $(TEXI2DVI) $(YACC)


Here is a table of variables whose values are additional arguments for the programs
above. The default values for all of these is the empty string, unless otherwise noted.

ARFLAGS Flags to give the archive-maintaining program; default ‘rv’.
ASFLAGS Extra flags to give to the assembler (when explicitly invoked on a ‘.s’ or ‘.S’file).
CFLAGS Extra flags to give to the C compiler.
CXXFLAGS Extra flags to give to the C++ compiler.
COFLAGS Extra flags to give to the RCS co program.
CPPFLAGS Extra flags to give to the C preprocessor and programs that use it (the C andFortran compilers).
FFLAGS Extra flags to give to the Fortran compiler.
GFLAGS Extra flags to give to the SCCS get program.
LDFLAGS Extra flags to give to compilers when they are supposed to invoke the linker,‘ld’.
LFLAGS Extra flags to give to Lex.
YFLAGS Extra flags to give to Yacc.
PFLAGS Extra flags to give to the Pascal compiler.
RFLAGS Extra flags to give to the Fortran compiler for Ratfor programs.
LINTFLAGS Extra flags to give to lint.






# GNU Make 3.81
# Copyright (C) 2006  Free Software Foundation, Inc.
# This is free software; see the source for copying conditions.
# There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

# This program built for x86_64-pc-linux-gnu

# Make data base, printed on Sun Apr  2 14:37:29 2017

# Variables

# automatic
<D = $(patsubst %/,%,$(dir $<))
# automatic
?F = $(notdir $?)
# environment
GIT_PS1_SHOWSTASHSTATE = +
# environment
MANSECT = 2:3posix:1:n:l:8:3:3pm:3perl:5:4:9:6:7
# default
CWEAVE = cweave
# automatic
?D = $(patsubst %/,%,$(dir $?))
# automatic
@D = $(patsubst %/,%,$(dir $@))
# automatic
@F = $(notdir $@)
# default
MAKE_VERSION := 3.81
# makefile
CURDIR := /home/jenia
# makefile
SHELL = /bin/sh
# default
RM = rm -f
# default
CO = co
# environment
_ = /usr/bin/make
# default
PREPROCESS.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F
# default
LINK.o = $(CC) $(LDFLAGS) $(TARGET_ARCH)
# default
OUTPUT_OPTION = -o $@
# default
COMPILE.cpp = $(COMPILE.cc)
# makefile
MAKEFILE_LIST := 
# default
LINK.p = $(PC) $(PFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
# default
CC = cc
# default
CHECKOUT,v = +$(if $(wildcard $@),,$(CO) $(COFLAGS) $< $@)
# environment
TERMINATOR_UUID = urn:uuid:1a05e229-5249-4066-87d7-515fb2a59d52
# environment
LESSOPEN = | /usr/bin/lesspipe %s
# default
CPP = $(CC) -E
# environment
ORBIT_SOCKETDIR = /tmp/orbit-jenia
# default
LINK.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
# environment
SSH_CONNECTION = 100.1.133.4 56133 110.1.2.100 22
# environment
PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/jenia/my/bin:/home/jenia/bin
# default
LD = ld
# default
TEXI2DVI = texi2dvi
# default
YACC = yacc
# default
COMPILE.mod = $(M2C) $(M2FLAGS) $(MODFLAGS) $(TARGET_ARCH)
# environment
XDG_RUNTIME_DIR = /run/user/1000
# default
ARFLAGS = rv
# default
LINK.r = $(FC) $(FFLAGS) $(RFLAGS) $(LDFLAGS) $(TARGET_ARCH)
# environment
WINDOWID = 8388611
# default
COMPILE.f = $(FC) $(FFLAGS) $(TARGET_ARCH) -c
# default
LINT.c = $(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH)
# default
LINT = lint
# default
YACC.y = $(YACC) $(YFLAGS)
# default
AR = ar
# default
.FEATURES := target-specific order-only second-expansion else-if archives jobserver check-symlink
# default
TANGLE = tangle
# environment
LS_COLORS = rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:
# default
GET = get
# automatic
%F = $(notdir $%)
# environment
DISPLAY = localhost:10.0
# default
COMPILE.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
# default
CTANGLE = ctangle
# default
.LIBPATTERNS = lib%.so lib%.a
# default
LINK.C = $(LINK.cc)
# environment
PWD = /home/jenia
# default
LINK.S = $(CC) $(ASFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_MACH)
# default
PREPROCESS.r = $(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -F
# automatic
*D = $(patsubst %/,%,$(dir $*))
# default
LINK.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
# default
LINK.s = $(CC) $(ASFLAGS) $(LDFLAGS) $(TARGET_MACH)
# environment
HOME = /home/jenia
# environment
GIT_PS1_SHOWUNTRACKEDFILES = +
# environment
LESSCLOSE = /usr/bin/lesspipe %s %s
# environment
LOGNAME = jenia
# default
M2C = m2c
# automatic
^D = $(patsubst %/,%,$(dir $^))
# environment
LC_TIME = en_US.UTF-8
# environment
COLORTERM = gnome-terminal
# default
MAKE = $(MAKE_COMMAND)
# environment
SHLVL = 2
# default
AS = as
# default
PREPROCESS.S = $(CC) -E $(CPPFLAGS)
# default
COMPILE.p = $(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
# environment
XDG_SESSION_ID = 23
# environment
USER = jenia
# default
FC = f77
# makefile
.DEFAULT_GOAL := 
# automatic
%D = $(patsubst %/,%,$(dir $%))
# default
WEAVE = weave
# default
MAKE_COMMAND := make
# default
LINK.cpp = $(LINK.cc)
# environment
GIT_PS1_SHOWDIRTYSTATE = +
# default
F77 = $(FC)
# environment
OLDPWD = /home/jenia/tma
# default
.VARIABLES := 
# default
PC = pc
# automatic
*F = $(notdir $*)
# default
COMPILE.def = $(M2C) $(M2FLAGS) $(DEFFLAGS) $(TARGET_ARCH)
# default
LEX = lex
# environment
GIT_PS1_SHOWUPSTREAM = verbose
# makefile
MAKEFLAGS = p
# environment
MFLAGS = -p
# environment
SSH_CLIENT = 100.1.133.4 56133 22
# environment
MAIL = /var/mail/jenia
# default
LEX.l = $(LEX) $(LFLAGS) -t
# automatic
+D = $(patsubst %/,%,$(dir $+))
# default
COMPILE.r = $(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -c
# automatic
+F = $(notdir $+)
# environment
NO_AT_BRIDGE = 1
# default
MAKEFILES := 
# default
COMPILE.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
# automatic
<F = $(notdir $<)
# default
CXX = g++
# default
COFLAGS = 
# default
COMPILE.C = $(COMPILE.cc)
# automatic
^F = $(notdir $^)
# default
COMPILE.S = $(CC) $(ASFLAGS) $(CPPFLAGS) $(TARGET_MACH) -c
# default
LINK.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
# default
SUFFIXES := .out .a .ln .o .c .cc .C .cpp .p .f .F .r .y .l .s .S .mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo .w .ch .web .sh .elc .el
# default
COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
# default
COMPILE.s = $(AS) $(ASFLAGS) $(TARGET_MACH)
# default
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
# environment
MAKELEVEL := 0
# default
MAKEINFO = makeinfo
# default
TEX = tex
# environment
LANG = en_US.UTF-8
# environment
TERM = xterm
# default
F77FLAGS = $(FFLAGS)
# default
LINK.f = $(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)
# variable set hash-table stats:
# Load=117/1024=11%, Rehash=0, Collisions=10/141=7%

# Pattern-specific Variable Values

# No pattern-specific variable values.

# Directories

# SCCS: could not be stat'd.
# . (device 2049, inode 24164354): 61 files, 51 impossibilities.
# RCS: could not be stat'd.

# 61 files, 51 impossibilities in 3 directories.

# Implicit Rules

%.out:

%.a:

%.ln:

%.o:

%: %.o
#  commands to execute (built-in):
	$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.c:

%: %.c
#  commands to execute (built-in):
	$(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.ln: %.c
#  commands to execute (built-in):
	$(LINT.c) -C$* $<

%.o: %.c
#  commands to execute (built-in):
	$(COMPILE.c) $(OUTPUT_OPTION) $<

%.cc:

%: %.cc
#  commands to execute (built-in):
	$(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.cc
#  commands to execute (built-in):
	$(COMPILE.cc) $(OUTPUT_OPTION) $<

%.C:

%: %.C
#  commands to execute (built-in):
	$(LINK.C) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.C
#  commands to execute (built-in):
	$(COMPILE.C) $(OUTPUT_OPTION) $<

%.cpp:

%: %.cpp
#  commands to execute (built-in):
	$(LINK.cpp) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.cpp
#  commands to execute (built-in):
	$(COMPILE.cpp) $(OUTPUT_OPTION) $<

%.p:

%: %.p
#  commands to execute (built-in):
	$(LINK.p) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.p
#  commands to execute (built-in):
	$(COMPILE.p) $(OUTPUT_OPTION) $<

%.f:

%: %.f
#  commands to execute (built-in):
	$(LINK.f) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.f
#  commands to execute (built-in):
	$(COMPILE.f) $(OUTPUT_OPTION) $<

%.F:

%: %.F
#  commands to execute (built-in):
	$(LINK.F) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.F
#  commands to execute (built-in):
	$(COMPILE.F) $(OUTPUT_OPTION) $<

%.f: %.F
#  commands to execute (built-in):
	$(PREPROCESS.F) $(OUTPUT_OPTION) $<

%.r:

%: %.r
#  commands to execute (built-in):
	$(LINK.r) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.r
#  commands to execute (built-in):
	$(COMPILE.r) $(OUTPUT_OPTION) $<

%.f: %.r
#  commands to execute (built-in):
	$(PREPROCESS.r) $(OUTPUT_OPTION) $<

%.y:

%.ln: %.y
#  commands to execute (built-in):
	$(YACC.y) $< 
	$(LINT.c) -C$* y.tab.c 
	$(RM) y.tab.c

%.c: %.y
#  commands to execute (built-in):
	$(YACC.y) $< 
	mv -f y.tab.c $@

%.l:

%.ln: %.l
#  commands to execute (built-in):
	@$(RM) $*.c
	$(LEX.l) $< > $*.c
	$(LINT.c) -i $*.c -o $@
	$(RM) $*.c

%.c: %.l
#  commands to execute (built-in):
	@$(RM) $@ 
	$(LEX.l) $< > $@

%.r: %.l
#  commands to execute (built-in):
	$(LEX.l) $< > $@ 
	mv -f lex.yy.r $@

%.s:

%: %.s
#  commands to execute (built-in):
	$(LINK.s) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.s
#  commands to execute (built-in):
	$(COMPILE.s) -o $@ $<

%.S:

%: %.S
#  commands to execute (built-in):
	$(LINK.S) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.S
#  commands to execute (built-in):
	$(COMPILE.S) -o $@ $<

%.s: %.S
#  commands to execute (built-in):
	$(PREPROCESS.S) $< > $@

%.mod:

%: %.mod
#  commands to execute (built-in):
	$(COMPILE.mod) -o $@ -e $@ $^

%.o: %.mod
#  commands to execute (built-in):
	$(COMPILE.mod) -o $@ $<

%.sym:

%.def:

%.sym: %.def
#  commands to execute (built-in):
	$(COMPILE.def) -o $@ $<

%.h:

%.info:

%.dvi:

%.tex:

%.dvi: %.tex
#  commands to execute (built-in):
	$(TEX) $<

%.texinfo:

%.info: %.texinfo
#  commands to execute (built-in):
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

%.dvi: %.texinfo
#  commands to execute (built-in):
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

%.texi:

%.info: %.texi
#  commands to execute (built-in):
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

%.dvi: %.texi
#  commands to execute (built-in):
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

%.txinfo:

%.info: %.txinfo
#  commands to execute (built-in):
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

%.dvi: %.txinfo
#  commands to execute (built-in):
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

%.w:

%.c: %.w
#  commands to execute (built-in):
	$(CTANGLE) $< - $@

%.tex: %.w
#  commands to execute (built-in):
	$(CWEAVE) $< - $@

%.ch:

%.web:

%.p: %.web
#  commands to execute (built-in):
	$(TANGLE) $<

%.tex: %.web
#  commands to execute (built-in):
	$(WEAVE) $<

%.sh:

%: %.sh
#  commands to execute (built-in):
	cat $< >$@ 
	chmod a+x $@

%.elc:

%.el:

(%): %
#  commands to execute (built-in):
	$(AR) $(ARFLAGS) $@ $<

%.out: %
#  commands to execute (built-in):
	@rm -f $@ 
	cp $< $@

%.c: %.w %.ch
#  commands to execute (built-in):
	$(CTANGLE) $^ $@

%.tex: %.w %.ch
#  commands to execute (built-in):
	$(CWEAVE) $^ $@

%:: %,v
#  commands to execute (built-in):
	$(CHECKOUT,v)

%:: RCS/%,v
#  commands to execute (built-in):
	$(CHECKOUT,v)

%:: RCS/%
#  commands to execute (built-in):
	$(CHECKOUT,v)

%:: s.%
#  commands to execute (built-in):
	$(GET) $(GFLAGS) $(SCCS_OUTPUT_OPTION) $<

%:: SCCS/s.%
#  commands to execute (built-in):
	$(GET) $(GFLAGS) $(SCCS_OUTPUT_OPTION) $<

# 86 implicit rules, 5 (5.8%) terminal.

# Files

# Not a target:
.web.p:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(TANGLE) $<

# Not a target:
.l.r:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LEX.l) $< > $@ 
	mv -f lex.yy.r $@

# Not a target:
.dvi:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.F.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.F) $(OUTPUT_OPTION) $<

# Not a target:
.l:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.y.ln:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(YACC.y) $< 
	$(LINT.c) -C$* y.tab.c 
	$(RM) y.tab.c

# Not a target:
.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.y:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.def.sym:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.def) -o $@ $<

# Not a target:
.p.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.p) $(OUTPUT_OPTION) $<

# Not a target:
.p:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.p) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.txinfo.dvi:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

# Not a target:
.a:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.l.ln:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	@$(RM) $*.c
	$(LEX.l) $< > $*.c
	$(LINT.c) -i $*.c -o $@
	$(RM) $*.c

# Not a target:
.w.c:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(CTANGLE) $< - $@

# Not a target:
.texi.dvi:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

# Not a target:
.sh:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	cat $< >$@ 
	chmod a+x $@

# Not a target:
.cc:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.cc.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.cc) $(OUTPUT_OPTION) $<

# Not a target:
.def:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.SUFFIXES: .out .a .ln .o .c .cc .C .cpp .p .f .F .r .y .l .s .S .mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo .w .ch .web .sh .elc .el
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.c.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.c) $(OUTPUT_OPTION) $<

# Not a target:
Makefile:
#  A default, MAKEFILES, or -include/sinclude makefile.
#  Implicit rule search has been done.
#  File does not exist.
#  File has been updated.
#  Failed to be updated.
# variable set hash-table stats:
# Load=0/32=0%, Rehash=0, Collisions=0/0=0%

# Not a target:
.r.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.r) $(OUTPUT_OPTION) $<

# Not a target:
.r:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.r) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
makefile:
#  A default, MAKEFILES, or -include/sinclude makefile.
#  Implicit rule search has been done.
#  File does not exist.
#  File has been updated.
#  Failed to be updated.
# variable set hash-table stats:
# Load=0/32=0%, Rehash=0, Collisions=0/0=0%

# Not a target:
.info:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.elc:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.l.c:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	@$(RM) $@ 
	$(LEX.l) $< > $@

# Not a target:
.out:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.C:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.C) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.r.f:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(PREPROCESS.r) $(OUTPUT_OPTION) $<

# Not a target:
.S:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.S) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.texinfo.info:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

# Not a target:
.c:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.w.tex:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(CWEAVE) $< - $@

# Not a target:
.c.ln:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINT.c) -C$* $<

# Not a target:
.s.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.s) -o $@ $<

# Not a target:
.s:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.s) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.texinfo.dvi:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

# Not a target:
.el:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.texinfo:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.y.c:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(YACC.y) $< 
	mv -f y.tab.c $@

# Not a target:
.web.tex:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(WEAVE) $<

# Not a target:
.texi.info:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

# Not a target:
.DEFAULT:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.h:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.tex.dvi:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(TEX) $<

# Not a target:
.cpp.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.cpp) $(OUTPUT_OPTION) $<

# Not a target:
.cpp:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.cpp) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.C.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.C) $(OUTPUT_OPTION) $<

# Not a target:
.ln:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.texi:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.txinfo:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.tex:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.txinfo.info:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

# Not a target:
.ch:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
GNUmakefile:
#  A default, MAKEFILES, or -include/sinclude makefile.
#  Implicit rule search has been done.
#  File does not exist.
#  File has been updated.
#  Failed to be updated.
# variable set hash-table stats:
# Load=0/32=0%, Rehash=0, Collisions=0/0=0%

# Not a target:
.S.s:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(PREPROCESS.S) $< > $@

# Not a target:
.mod:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.mod) -o $@ -e $@ $^

# Not a target:
.mod.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.mod) -o $@ $<

# Not a target:
.F.f:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(PREPROCESS.F) $(OUTPUT_OPTION) $<

# Not a target:
.w:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.S.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.S) -o $@ $<

# Not a target:
.F:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.F) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.web:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.sym:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.f:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(LINK.f) $^ $(LOADLIBES) $(LDLIBS) -o $@

# Not a target:
.f.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (built-in):
	$(COMPILE.f) $(OUTPUT_OPTION) $<

# files hash-table stats:
# Load=69/1024=7%, Rehash=0, Collisions=276/1520=18%
# VPATH Search Paths

# No `vpath' search paths.

# No general (`VPATH' variable) search path.

# # of strings in strcache: 0
# # of strcache buffers: 0
# strcache size: total = 0 / max = 0 / min = 4096 / avg = 0
# strcache free: total = 0 / max = 0 / min = 4096 / avg = 0

# Finished Make data base on Sun Apr  2 14:37:29 2017














































