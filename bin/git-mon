#!/bin/bash

#reset terminal colors on exit
trap 'tput cnorm ; kill $(jobs -p)' EXIT



Main() {
    git log -n 1 &> /dev/null || { echo Nothing to git in this directory ; exit 1 ; }

    Prev="/tmp/git-mon-prev"
    Now="/tmp/git-mon-now"

    rm -rf $Prev $Now

    Stat=$Now-stat

    #update remote repo log in background
    GitFetch &

    while true; do
        #hide cursor
        tput civis

        Lines=$(tput lines)
        Cols=$(tput cols)

        #save current git status
        GitLog &> $Now

        #include screen size with status so that redraw will be triggered on terminal resize
        echo $Lines $Cols >> $Now

        #print on change only to prevent screen flicker
        diff $Now $Prev &>/dev/null || { tput clear ; GitLog ; }

        mv -f $Now $Prev &>/dev/null

        #read for file number selection to diff it
        read -N 2 -t 2
        [[ -z "$REPLY" ]] && continue

        #force screen refresh to clear typed selection
        echo $REPLY >> $Prev

        [[ "$REPLY" == "cc" ]] && { git commit -a ; continue ; }
        
        [[ "$REPLY" == "pp" ]] && { git push ; continue ; }

        if [[ "$REPLY" =~ [0-9][0-9] ]] ; then
            DiffFile=$(
                git status -s -b -u  | sed -e '=' |     #add lines with line numbers to status list
                sed 'N;s/\n/\t/g' |                     #remove extra EOL
                sed -r 's/^[0-9]/0&/' | grep  "^$REPLY" | cut -c 7- #extract file name
            )

            git difftool $DiffFile
        fi

    done
}


GitLog() {
    MessLen=$(($Cols-20))
    LDate="%<(18,trunc)%ci"
    LName="%<(5,trunc)%ae"
    LHash="%C(auto)%h"
    LMess="%C(white bold)%s%C(reset)"
    LRefs="%C(auto)%d"
    LWrap1="%w($(($Cols-3)),1,20)"
    CmdLog="git log -100 --all --graph --decorate=short --color \
     --format=format:\"$LWrap$LHash $LDate $LName $LMess $LRefs\""

    #print status with file names numbered for diff selection
    CmdStat="git -c color.status=always status -s -b -u  | \
                sed -e '=' | sed 'N;s/\n/\t/g' | \
                sed -r 's/^[0-9]/0&/' 2>/dev/null"


    #how long is the status?
    StatusLines=$(eval $CmdStat | CountLines)

    #how much lines left for log?
    LogLines=$(($Lines - $StatusLines))

    #how long is the log including wrapped lines?
    RealLogLines=$(eval $CmdLog --color=never | head -n $LogLines | CountLines)

    #adjust log lines considering wrapped lines
    LogLines=$(($LogLines - $RealLogLines + $LogLines - 3))

    echo
    eval $CmdLog --color=always | head -n $LogLines | perl -lpe 's/(?<=\s)\d\d(\d\d)(?=-)/\1/g ; s/\.\. / /g'
    echo

    eval $CmdStat

    #a marker to show the output is not truncated
    printf "%*s" $(( (3 + $Cols) / 2)) ___
}


GitFetch() {
    while true ; do
        git fetch --all --prune &> /dev/null
        sleep 3
    done
}


CountLines() {
    fold -w $Cols | wc -l
}


Main

